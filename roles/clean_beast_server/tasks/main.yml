---

- name: Check if {{ pot_beast_clone_name }} exists
  become: yes
  become_user: root
  ansible.builtin.command: "zfs list -t filesystem zroot/opt/pot/jails/{{ pot_beast_clone_name }}/m"
  register: pot_beast_clone_installed
  failed_when: no
  changed_when: pot_beast_clone_installed.rc != 0
  run_once: true
  delegate_to: "{{ groups['servers'][0] }}"

- name: Print out debug messages for beast clone check
  ansible.builtin.debug:
    msg: beast-clone check rc output is {{ pot_beast_clone_installed.rc }}
  run_once: true
  delegate_to: "{{ groups['servers'][0] }}"

- name: Destroy {{ pot_beast_clone_name }}
  become: yes
  become_user: root
  shell:
    cmd: |
      pot destroy -F -p "{{ pot_beast_clone_name }}"
  run_once: true
  delegate_to: "{{ groups['servers'][0] }}"
  when: pot_beast_clone_installed.rc == 0

- name: Check if zroot/{{ my_data_dataset }}/jaildata/beast exists
  become: yes
  become_user: root
  ansible.builtin.command: "zfs list -t filesystem zroot/{{ my_data_dataset }}/jaildata/beast"
  register: check_beastdata_exists
  failed_when: no
  changed_when: "check_beastdata_exists.rc != 0"
  run_once: true
  delegate_to: "{{ groups['servers'][0] }}"

- name: Wipe beast persistant storage
  become: yes
  become_user: root
  shell:
    cmd: |
      cd /mnt/{{ my_data_dataset }}/jaildata/beast && rm -rf *
  run_once: true
  delegate_to: "{{ groups['servers'][0] }}"
  when: check_beastdata_exists.rc == 0
